name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
            name: please-windows-amd64.exe
          - goos: linux
            goarch: amd64
            ext: ""
            name: please-linux-amd64
          - goos: linux
            goarch: arm64
            ext: ""
            name: please-linux-arm64
          - goos: darwin
            goarch: amd64
            ext: ""
            name: please-macos-amd64
          - goos: darwin
            goarch: arm64
            ext: ""
            name: please-macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -ldflags="-s -w" -o ${{ matrix.name }} main.go
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts/
        
    - name: Prepare release files
      run: |
        mkdir -p dist
        # Copy all artifacts to dist directory
        find ./artifacts/ -name "please-*" -type f -exec cp {} ./dist/ \;
        ls -la ./dist/
        
    - name: Generate release tag
      id: tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "tag=latest-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Please ${{ steps.tag.outputs.tag }}
        body: |
          ðŸ¤– **Please - Your Overly Helpful Digital Assistant**
          
          Cross-platform AI-powered script generator with natural language interface.
          
          ## Downloads
          
          Choose the appropriate binary for your platform:
          
          ### Windows
          - **please-windows-amd64.exe** - Windows 64-bit (Intel/AMD)
          
          ### Linux  
          - **please-linux-amd64** - Linux 64-bit (Intel/AMD)
          - **please-linux-arm64** - Linux ARM64 (ARM processors)
          
          ### macOS
          - **please-macos-amd64** - macOS Intel (x86_64)
          - **please-macos-arm64** - macOS Apple Silicon (M1/M2/M3)
          
          ## Quick Start
          
          1. Download the binary for your platform
          2. Make executable (Linux/macOS): `chmod +x <binary-name>`
          3. Run: `./please-<platform> help`
          
          ## Usage Examples
          
          ```bash
          please backup my documents folder
          please show system memory usage
          please create a git commit script
          please organize photos by date
          ```
          
          ## Requirements
          
          - No dependencies - single binary
          - AI Provider: Ollama (recommended), OpenAI, or Anthropic
          
          ---
          
          Built automatically from commit: ${{ github.sha }}
        draft: false
        prerelease: ${{ steps.tag.outputs.prerelease }}
        files: |
          dist/please-windows-amd64.exe
          dist/please-linux-amd64
          dist/please-linux-arm64
          dist/please-macos-amd64
          dist/please-macos-arm64
        token: ${{ secrets.GITHUB_TOKEN }}
